// Generated by gencpp from file dodo_detector_ros/DetectedObject.msg
// DO NOT EDIT!


#ifndef DODO_DETECTOR_ROS_MESSAGE_DETECTEDOBJECT_H
#define DODO_DETECTOR_ROS_MESSAGE_DETECTEDOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>

namespace dodo_detector_ros
{
template <class ContainerAllocator>
struct DetectedObject_
{
  typedef DetectedObject_<ContainerAllocator> Type;

  DetectedObject_()
    : type()
    , tf_id()
    , image_x()
    , image_y()
    , image_height()
    , image_width()  {
    }
  DetectedObject_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , tf_id(_alloc)
    , image_x(_alloc)
    , image_y(_alloc)
    , image_height(_alloc)
    , image_width(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _type_type;
  _type_type type;

   typedef  ::std_msgs::String_<ContainerAllocator>  _tf_id_type;
  _tf_id_type tf_id;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _image_x_type;
  _image_x_type image_x;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _image_y_type;
  _image_y_type image_y;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _image_height_type;
  _image_height_type image_height;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _image_width_type;
  _image_width_type image_width;





  typedef boost::shared_ptr< ::dodo_detector_ros::DetectedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dodo_detector_ros::DetectedObject_<ContainerAllocator> const> ConstPtr;

}; // struct DetectedObject_

typedef ::dodo_detector_ros::DetectedObject_<std::allocator<void> > DetectedObject;

typedef boost::shared_ptr< ::dodo_detector_ros::DetectedObject > DetectedObjectPtr;
typedef boost::shared_ptr< ::dodo_detector_ros::DetectedObject const> DetectedObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dodo_detector_ros::DetectedObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dodo_detector_ros::DetectedObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dodo_detector_ros::DetectedObject_<ContainerAllocator1> & lhs, const ::dodo_detector_ros::DetectedObject_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.tf_id == rhs.tf_id &&
    lhs.image_x == rhs.image_x &&
    lhs.image_y == rhs.image_y &&
    lhs.image_height == rhs.image_height &&
    lhs.image_width == rhs.image_width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dodo_detector_ros::DetectedObject_<ContainerAllocator1> & lhs, const ::dodo_detector_ros::DetectedObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dodo_detector_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dodo_detector_ros::DetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dodo_detector_ros::DetectedObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dodo_detector_ros::DetectedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dodo_detector_ros::DetectedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dodo_detector_ros::DetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dodo_detector_ros::DetectedObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dodo_detector_ros::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5e23e630fb1ee6640a981b4e23121ce";
  }

  static const char* value(const ::dodo_detector_ros::DetectedObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5e23e630fb1ee66ULL;
  static const uint64_t static_value2 = 0x40a981b4e23121ceULL;
};

template<class ContainerAllocator>
struct DataType< ::dodo_detector_ros::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dodo_detector_ros/DetectedObject";
  }

  static const char* value(const ::dodo_detector_ros::DetectedObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dodo_detector_ros::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String type\n"
"std_msgs/String tf_id\n"
"std_msgs/Int32 image_x\n"
"std_msgs/Int32 image_y\n"
"std_msgs/Int32 image_height\n"
"std_msgs/Int32 image_width\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
;
  }

  static const char* value(const ::dodo_detector_ros::DetectedObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dodo_detector_ros::DetectedObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.tf_id);
      stream.next(m.image_x);
      stream.next(m.image_y);
      stream.next(m.image_height);
      stream.next(m.image_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectedObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dodo_detector_ros::DetectedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dodo_detector_ros::DetectedObject_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
    s << indent << "tf_id: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.tf_id);
    s << indent << "image_x: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.image_x);
    s << indent << "image_y: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.image_y);
    s << indent << "image_height: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.image_height);
    s << indent << "image_width: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.image_width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DODO_DETECTOR_ROS_MESSAGE_DETECTEDOBJECT_H
