// Generated by gencpp from file ebot_task4/legends.msg
// DO NOT EDIT!


#ifndef EBOT_TASK4_MESSAGE_LEGENDS_H
#define EBOT_TASK4_MESSAGE_LEGENDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ebot_task4
{
template <class ContainerAllocator>
struct legends_
{
  typedef legends_<ContainerAllocator> Type;

  legends_()
    : x1(0.0)
    , y1(0.0)
    , z1(0.0)
    , x2(0.0)
    , y2(0.0)
    , z2(0.0)
    , x3(0.0)
    , y3(0.0)
    , z3(0.0)  {
    }
  legends_(const ContainerAllocator& _alloc)
    : x1(0.0)
    , y1(0.0)
    , z1(0.0)
    , x2(0.0)
    , y2(0.0)
    , z2(0.0)
    , x3(0.0)
    , y3(0.0)
    , z3(0.0)  {
  (void)_alloc;
    }



   typedef double _x1_type;
  _x1_type x1;

   typedef double _y1_type;
  _y1_type y1;

   typedef double _z1_type;
  _z1_type z1;

   typedef double _x2_type;
  _x2_type x2;

   typedef double _y2_type;
  _y2_type y2;

   typedef double _z2_type;
  _z2_type z2;

   typedef double _x3_type;
  _x3_type x3;

   typedef double _y3_type;
  _y3_type y3;

   typedef double _z3_type;
  _z3_type z3;





  typedef boost::shared_ptr< ::ebot_task4::legends_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ebot_task4::legends_<ContainerAllocator> const> ConstPtr;

}; // struct legends_

typedef ::ebot_task4::legends_<std::allocator<void> > legends;

typedef boost::shared_ptr< ::ebot_task4::legends > legendsPtr;
typedef boost::shared_ptr< ::ebot_task4::legends const> legendsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ebot_task4::legends_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ebot_task4::legends_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ebot_task4::legends_<ContainerAllocator1> & lhs, const ::ebot_task4::legends_<ContainerAllocator2> & rhs)
{
  return lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.z1 == rhs.z1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2 &&
    lhs.z2 == rhs.z2 &&
    lhs.x3 == rhs.x3 &&
    lhs.y3 == rhs.y3 &&
    lhs.z3 == rhs.z3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ebot_task4::legends_<ContainerAllocator1> & lhs, const ::ebot_task4::legends_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ebot_task4

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ebot_task4::legends_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ebot_task4::legends_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ebot_task4::legends_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ebot_task4::legends_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ebot_task4::legends_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ebot_task4::legends_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ebot_task4::legends_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a702617d285f6d4f32694556f4f3012";
  }

  static const char* value(const ::ebot_task4::legends_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a702617d285f6d4ULL;
  static const uint64_t static_value2 = 0xf32694556f4f3012ULL;
};

template<class ContainerAllocator>
struct DataType< ::ebot_task4::legends_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ebot_task4/legends";
  }

  static const char* value(const ::ebot_task4::legends_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ebot_task4::legends_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# the pose of the object\n"
"float64 x1\n"
"float64 y1\n"
"float64 z1\n"
"\n"
"\n"
"float64 x2\n"
"float64 y2\n"
"float64 z2\n"
"\n"
"\n"
"float64 x3\n"
"float64 y3\n"
"float64 z3\n"
;
  }

  static const char* value(const ::ebot_task4::legends_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ebot_task4::legends_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.z1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.z2);
      stream.next(m.x3);
      stream.next(m.y3);
      stream.next(m.z3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct legends_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ebot_task4::legends_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ebot_task4::legends_<ContainerAllocator>& v)
  {
    s << indent << "x1: ";
    Printer<double>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<double>::stream(s, indent + "  ", v.y1);
    s << indent << "z1: ";
    Printer<double>::stream(s, indent + "  ", v.z1);
    s << indent << "x2: ";
    Printer<double>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<double>::stream(s, indent + "  ", v.y2);
    s << indent << "z2: ";
    Printer<double>::stream(s, indent + "  ", v.z2);
    s << indent << "x3: ";
    Printer<double>::stream(s, indent + "  ", v.x3);
    s << indent << "y3: ";
    Printer<double>::stream(s, indent + "  ", v.y3);
    s << indent << "z3: ";
    Printer<double>::stream(s, indent + "  ", v.z3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EBOT_TASK4_MESSAGE_LEGENDS_H
