# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dodo_detector_ros/DetectedObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class DetectedObject(genpy.Message):
  _md5sum = "e5e23e630fb1ee6640a981b4e23121ce"
  _type = "dodo_detector_ros/DetectedObject"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/String type
std_msgs/String tf_id
std_msgs/Int32 image_x
std_msgs/Int32 image_y
std_msgs/Int32 image_height
std_msgs/Int32 image_width

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Int32
int32 data"""
  __slots__ = ['type','tf_id','image_x','image_y','image_height','image_width']
  _slot_types = ['std_msgs/String','std_msgs/String','std_msgs/Int32','std_msgs/Int32','std_msgs/Int32','std_msgs/Int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,tf_id,image_x,image_y,image_height,image_width

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectedObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = std_msgs.msg.String()
      if self.tf_id is None:
        self.tf_id = std_msgs.msg.String()
      if self.image_x is None:
        self.image_x = std_msgs.msg.Int32()
      if self.image_y is None:
        self.image_y = std_msgs.msg.Int32()
      if self.image_height is None:
        self.image_height = std_msgs.msg.Int32()
      if self.image_width is None:
        self.image_width = std_msgs.msg.Int32()
    else:
      self.type = std_msgs.msg.String()
      self.tf_id = std_msgs.msg.String()
      self.image_x = std_msgs.msg.Int32()
      self.image_y = std_msgs.msg.Int32()
      self.image_height = std_msgs.msg.Int32()
      self.image_width = std_msgs.msg.Int32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.tf_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4i().pack(_x.image_x.data, _x.image_y.data, _x.image_height.data, _x.image_width.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.type is None:
        self.type = std_msgs.msg.String()
      if self.tf_id is None:
        self.tf_id = std_msgs.msg.String()
      if self.image_x is None:
        self.image_x = std_msgs.msg.Int32()
      if self.image_y is None:
        self.image_y = std_msgs.msg.Int32()
      if self.image_height is None:
        self.image_height = std_msgs.msg.Int32()
      if self.image_width is None:
        self.image_width = std_msgs.msg.Int32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tf_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tf_id.data = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.image_x.data, _x.image_y.data, _x.image_height.data, _x.image_width.data,) = _get_struct_4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.tf_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4i().pack(_x.image_x.data, _x.image_y.data, _x.image_height.data, _x.image_width.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.type is None:
        self.type = std_msgs.msg.String()
      if self.tf_id is None:
        self.tf_id = std_msgs.msg.String()
      if self.image_x is None:
        self.image_x = std_msgs.msg.Int32()
      if self.image_y is None:
        self.image_y = std_msgs.msg.Int32()
      if self.image_height is None:
        self.image_height = std_msgs.msg.Int32()
      if self.image_width is None:
        self.image_width = std_msgs.msg.Int32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tf_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tf_id.data = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.image_x.data, _x.image_y.data, _x.image_height.data, _x.image_width.data,) = _get_struct_4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
